$ psp=SP
// parameter stack: $psp
$ rsp=X19
// return stack: $rsp
$ next_word_reg=X20
// current word being executed in a list of words: $next_word_reg
$ at_start=

// linux system calls
$ grep -E '#define (__NR_brk|__NR_write|__NR_exit) ' 
> /usr/include/asm-generic/unistd.h 
> | awk '{ print ".set\t" $2 "," $3 }' | sed 's/__NR_/linux_/'

	.global _start

$ cat features/indirect-threading-mag-2-words.s.bt | hydrate
	.macro PUSHRSP reg
	str	reg, [$rsp, #-8]
	.endm

	.macro POPRSP reg
	ldr	reg, [$rsp], #8
	.endm

	.text
	.align	4

_start: mov	X0, #1
	$at_start

	ldr	X1, =lemon_version
	mov	X2, #lemon_version_end-lemon_version
	mov	X8, #linux_write
	svc	0

	str	$psp, [var_S0]
	ldr	$rsp, #return_stack_top
	bl	set_up_data_segment
	ldr	$next_word_reg, #cold_start
	NEXT
	// should never reach this line

	mov	X0, #0
	mov	X8, #linux_exit
	svc	0

	.data
lemon_version:	
	.ascii	"Lemon v0.0.0\n"
lemon_version_end:
cold_start:
	.int	QUIT

	.set	F_IMMED,0x80
	.set	F_HIDDEN,0x20

	// Store the chain of links.
	.set 	link,0
	        
// L0 word definition: raw assembly code
// example: name=DUP flags=F_IMMED label=DUP defword0
$ defword0() {
> local label=${label:-$name}
> local flags=${flags:-0}
> local byte_count
> get_byte_count "$name"
> echo "
> 	.section	.rodata
> 	.align	8
> 	.globl	name_$label
> name_$label :
> 	.int	link
> 	.set	link,name_$label
> 	.byte	$flags
> 	.byte	$byte_count
> 	.ascii	"$name"
> 	.align	8
> 	.globl	$label
> $label :
> 	// codeword - the interpreter
> 	.int	code_$label
> 	.text
> 	.globl	code_$label
> code_$label :
> " | hydrate | trim_nl
> }

// L1 word definition
// example: name=DUP flags=F_IMMED label=DUP defword1
$ defword1() {
> local label=${label:-$name}
> local flags=${flags:-0}
> local byte_count
> get_byte_count "$name"
> echo "
> 	.section	.rodata
> 	.align	8
> 	.globl	name_$label
> name_$label :
> 	.int	link
> 	.set	link,name_$label
> 	.byte	$flags
> 	.byte	$byte_count
> 	.ascii	"$name"
> 	.align	8
> 	.globl	$label
> $label :
> 	// codeword - the interpreter
> 	.int	DOCOL3
> " | hydrate | trim_nl
> }

	.text
	.set	INITIAL_DATA_SEGMENT_SIZE,65536

set_up_data_segment:
        mov	X0, XZR
        mov	X8, #linux_brk
	svc	0
	// Initialise HERE to point at beginning of data segment.
        str	X0, [var_HERE]
	// Reserve nn bytes of memory for initial data segment.
        add	X0, X0, #INITIAL_DATA_SEGMENT_SIZE
	// Call brk(HERE+INITIAL_DATA_SEGMENT_SIZE)
        mov	X8, #linux_brk
	svc	0
        ret

/*
        We allocate static buffers for the return static and input buffer (used when
        reading in files and text that the user types in).
*/
        .set	RETURN_STACK_SIZE,8192
        .set	BUFFER_SIZE,4096

        .bss
        .align	4096
return_stack:
        .space	RETURN_STACK_SIZE
// Initial top of return stack.
return_stack_top:

/* This is used as a temporary input buffer when reading from files or the terminal. */
        .align	4096
buffer:
        .space	BUFFER_SIZE

